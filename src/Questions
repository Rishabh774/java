🚀 25-Day DSA Practice Plan

🧠 Handpicked Coding Questions for Service-Based Companies
📅 2 Days per Topic | 🔥 Only Questions | 💯 Interview-Focused

🟩 Day 1-2: 📦 Arrays

1️⃣ Find the maximum subarray sum
2️⃣ Move all zeroes to the end of the array
3️⃣ Find the missing number from an array of 0 to n
4️⃣ Find the second largest element in the array
5️⃣ Check if the array is a palindrome
6️⃣ Rearrange array such that positive and negative numbers alternate
7️⃣ Merge two sorted arrays without using extra space
8️⃣ Rotate an array by k steps

🟨 Day 3-4: 🔤 Strings

1️⃣ Check if two strings are anagrams
2️⃣ Remove all duplicate characters from a string
3️⃣ Count vowels and consonants in a string
4️⃣ Find the first non-repeating character
5️⃣ Check if a string is a palindrome
6️⃣ Reverse the words in a sentence
7️⃣ Compress the string (e.g., aabb → a2b2)
8️⃣ Convert string to integer (implement atoi)

🟦 Day 5-6: 💡 Bit Manipulation

1️⃣ Find the number that appears only once where every other appears twice
2️⃣ Count the number of set bits in an integer
3️⃣ Check if a number is a power of 2
4️⃣ Swap two numbers without using a temporary variable
5️⃣ Determine XOR of numbers from 1 to n
6️⃣ Check if ith bit is set in a number
7️⃣ Find the only non-repeating element where every other appears thrice
8️⃣ Turn off the rightmost set bit

🟪 Day 7-8: 🔎 Hashing

1️⃣ Count the frequency of each element in an array
2️⃣ Find all pairs with a given sum
3️⃣ Find the first element that appears k times
4️⃣ Check if two strings are isomorphic
5️⃣ Longest subarray with zero sum
6️⃣ Find duplicate elements in an array
7️⃣ Find common elements in three sorted arrays
8️⃣ Longest consecutive elements sequence in an unsorted array

🟥 Day 9-10: 🧮 2D Arrays

1️⃣ Rotate a matrix by 90 degrees
2️⃣ Print matrix in spiral order
3️⃣ Search for an element in a row-wise and column-wise sorted matrix
4️⃣ Set entire row and column to zero if any cell is zero
5️⃣ Transpose of a matrix
6️⃣ Find the row with the maximum number of 1s
7️⃣ Diagonal traversal of a matrix
8️⃣ Check if a matrix is symmetric

🟧 Day 11-12: 🔃 Sorting

1️⃣ Sort an array of 0s, 1s and 2s
2️⃣ Find the Kth largest element in an array
3️⃣ Merge overlapping intervals
4️⃣ Find the minimum difference between any two elements
5️⃣ Count sort implementation
6️⃣ Sort an array using insertion sort
7️⃣ Find the number of inversions in an array
8️⃣ Check if an array can be sorted by swapping only adjacent elements

🟫 Day 13-14: 🎯 Binary Search

1️⃣ Binary search in a sorted array
2️⃣ Find square root of a number without using sqrt function
3️⃣ Find the element that occurs only once in a sorted array
4️⃣ Search in a rotated sorted array
5️⃣ Find peak element in an array
6️⃣ Find first and last occurrence of an element
7️⃣ Find position to insert an element to keep array sorted
8️⃣ Count occurrences of a number in a sorted array

🟨 Day 15-16: ✨ Patterns

1️⃣ Print half pyramid using numbers
2️⃣ Print full pyramid using stars
3️⃣ Print Floyd’s triangle
4️⃣ Print Pascal’s triangle
5️⃣ Print butterfly pattern
6️⃣ Print diamond pattern using stars
7️⃣ Print hollow rectangle
8️⃣ Print zig-zag pattern

🟩 Day 17-18: 🔗 Linked List

1️⃣ Reverse a linked list
2️⃣ Detect a cycle in a linked list
3️⃣ Merge two sorted linked lists
4️⃣ Remove N-th node from end of list
5️⃣ Find the middle of a linked list
6️⃣ Check if linked list is a palindrome
7️⃣ Remove duplicate nodes from a sorted linked list
8️⃣ Delete a node without head pointer

🟦 Day 19-20: 🥞 Stack

1️⃣ Implement a stack using arrays
2️⃣ Implement two stacks in one array
3️⃣ Evaluate a postfix expression
4️⃣ Check for balanced parentheses
5️⃣ Design a stack that returns min in O(1) time
6️⃣ Sort a stack using recursion
7️⃣ Next greater element for each array element
8️⃣ Check if a string has redundant brackets

🟥 Day 21-22: 🚌 Queue & Deque

1️⃣ Implement queue using two stacks
2️⃣ Implement circular queue
3️⃣ Find first negative integer in every window of size k
4️⃣ Reverse the first k elements of a queue
5️⃣ Implement deque using array
6️⃣ Generate binary numbers from 1 to n using queue
7️⃣ Interleave first and second halves of a queue
8️⃣ Sliding window maximum

🟪 Day 23-24: 🧩 Mixed Questions

1️⃣ Longest substring without repeating characters
2️⃣ Find duplicate number using cycle detection
3️⃣ Top K frequent elements
4️⃣ Largest subarray with equal number of 0s and 1s
5️⃣ Reorganize string so that no two same characters are adjacent
6️⃣ Subarray sum equals K
7️⃣ Find majority element in an array
8️⃣ Count subarrays with sum divisible by k

🏁 Day 25: ⚔️ Final Practice (Mock Style)

1️⃣ Implement LRU cache
2️⃣ Flatten a linked list
3️⃣ Serialize and deserialize a binary tree
4️⃣ Kth smallest element in a sorted matrix
5️⃣ Clone a linked list with random pointers
6️⃣ Find minimum platforms needed for trains
7️⃣ Job sequencing problem
8️⃣ Maximum profit from buying and selling a stock .

  /// Ye sb nhi padhna hai abhi😒😒😒😒
🌲 Trees

🔹 Inorder, Preorder, Postorder Traversal
🔹 Level Order Traversal (BFS)
🔹 Convert Binary Tree to DLL
🔹 Lowest Common Ancestor (LCA)
🔹 Height and Diameter of Tree
🔹 Mirror of Binary Tree
🔹 Check if Tree is Balanced
🔹 Top, Bottom, Left, Right, Zigzag Views

🌴 Binary Search Trees (BST)

🔹 Insertion and Deletion in BST
🔹 Validate BST
🔹 Kth Smallest / Largest Element
🔹 Floor and Ceil in BST
🔹 Construct BST from Preorder / Postorder

🔁 Recursion & Backtracking

🔹 Generate Subsets / Subsequences
🔹 N-Queens Problem
🔹 Sudoku Solver
🔹 Rat in a Maze
🔹 Word Search in Grid
🔹 Permutations and Combinations
🔹 Expression Add Operators

🧊 Heap / Priority Queue

🔹 Min / Max Heap Implementation
🔹 Kth Largest / Smallest Element
🔹 Merge K Sorted Arrays
🔹 Top K Frequent Elements
🔹 Median in a Stream

⚙️ Greedy Algorithms

🔹 Activity Selection
🔹 Fractional Knapsack
🔹 Huffman Encoding
🔹 Minimum Platforms Required
🔹 Job Sequencing with Deadline
🔹 Gas Station / Circular Tour

📐 Dynamic Programming (DP)

🔹 Fibonacci (Memoization / Tabulation)
🔹 0/1 Knapsack
🔹 Longest Common Subsequence (LCS)
🔹 Longest Increasing Subsequence (LIS)
🔹 Matrix Chain Multiplication
🔹 Coin Change
🔹 Subset Sum
🔹 Edit Distance
🔹 Palindromic Substrings

🧠 Graph Algorithms

🔹 BFS and DFS
🔹 Detect Cycle (Undirected & Directed)
🔹 Topological Sort
🔹 Shortest Path: Dijkstra, Bellman-Ford
🔹 Minimum Spanning Tree: Prim’s, Kruskal’s
🔹 Flood Fill
🔹 Number of Islands
🔹 Bipartite Graph

🧵 Trie (Prefix Tree)

🔹 Insert and Search
🔹 Word Break
🔹 Auto-complete
🔹 Longest Prefix Match

📊 Sliding Window & Two Pointers

🔹 Minimum Window Substring
🔹 Longest Substring with K Distinct Characters
🔹 Count Anagrams
🔹 Max Sum Subarray of Size K

📐 Mathematics & Number Theory

🔹 Sieve of Eratosthenes
🔹 GCD / LCM
🔹 Prime Factorization
🔹 Modular Arithmetic
🔹 Fast Exponentiation

🧱 Segment Tree / Binary Indexed Tree

🔹 Range Sum Query
🔹 Range Min / Max Query
🔹 Point Updates
🔹 Lazy Propagation

🔗 Disjoint Set Union (DSU)

🔹 Find and Union
🔹 Cycle Detection using DSU
🔹 Union by Rank
🔹 Path Compression

🧰 Advanced Data Structures

🔹 HashMap / HashSet Internal Working
🔹 LRU Cache using DLL + HashMap
🔹 Monotonic Stack / Queue
🔹 Skip List

🧬 String Algorithms (Advanced)

🔹 Rabin-Karp
🔹 KMP Algorithm
🔹 Z-Algorithm
🔹 Manacher’s Algorithm (Longest Palindromic Substring)



This sem remaining
Recursion
Backtracking
Bit manipulation
2D array
Question practice

Next sem goal
Binary Tree 10
Binary Search Tree 10
Graphs 10
Tries 5
Greedy 5
DP 5
Heap 5
2 Months